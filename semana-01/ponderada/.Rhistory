}
# Gráficos para variáveis de data (séries temporais)
for (var in date_vars) {
p <- ggplot(data, aes_string(x = var)) +
geom_bar() +
theme_minimal() +
labs(title = paste("Distribuição de", var, "na tabela", table_name),
x = var, y = "Contagem") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
# Caso seja necessário um gráfico de linha, podemos ordenar os dados por data e plotar
if (length(unique(data[[var]])) > 1) {
p <- ggplot(data, aes_string(x = var)) +
geom_line(stat = "count", color = "blue", size = 1) +
theme_minimal() +
labs(title = paste("Contagem ao longo do tempo de", var, "na tabela", table_name),
x = var, y = "Contagem") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
}
}
create_plots <- function(data, table_name) {
# Identificar variáveis categóricas, numéricas e de data
categorical_vars <- data %>%
select(where(is.factor)) %>%
colnames()
numeric_vars <- data %>%
select(where(is.numeric)) %>%
colnames()
date_vars <- data %>%
select(where(function(x) inherits(x, "Date") | inherits(x, "POSIXt"))) %>%
colnames()
# Gráficos para variáveis categóricas
for (var in categorical_vars) {
p <- ggplot(data, aes_string(x = var)) +
geom_bar() +
theme_minimal() +
labs(title = paste("Distribuição de", var, "na tabela", table_name),
x = var, y = "Contagem")
print(p)
}
# Gráficos para variáveis numéricas com histograma e curva de densidade
for (var in numeric_vars) {
p <- ggplot(data, aes_string(x = var)) +
geom_histogram(aes(y = ..density..), binwidth = 30, fill = "skyblue", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1) +  # Adiciona a curva de densidade
theme_minimal() +
labs(title = paste("Distribuição de", var, "na tabela", table_name),
x = var, y = "Densidade") +
theme(plot.title = element_text(hjust = 0.5))
print(p)
}
# Gráficos para variáveis de data (séries temporais)
for (var in date_vars) {
p <- ggplot(data, aes_string(x = var)) +
geom_bar() +
theme_minimal() +
labs(title = paste("Distribuição de", var, "na tabela", table_name),
x = var, y = "Contagem") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
# Caso seja necessário um gráfico de linha, podemos ordenar os dados por data e plotar
if (length(unique(data[[var]])) > 1) {
p <- ggplot(data, aes_string(x = var)) +
geom_line(stat = "count", color = "blue", size = 1) +
theme_minimal() +
labs(title = paste("Contagem ao longo do tempo de", var, "na tabela", table_name),
x = var, y = "Contagem") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
}
}
create_plots(InteliStatus, "InteliStatus")
create_plots <- function(data, table_name) {
# Identificar variáveis categóricas e numéricas
categorical_vars <- data %>%
select(where(is.factor)) %>%
colnames()
numeric_vars <- data %>%
select(where(is.numeric)) %>%
colnames()
# Gráficos para variáveis categóricas
for (var in categorical_vars) {
p <- ggplot(data, aes_string(x = var)) +
geom_bar() +
theme_minimal() +
labs(title = paste("Distribuição de", var, "na tabela", table_name),
x = var, y = "Contagem")
print(p)
}
# Gráficos para variáveis numéricas com histograma e curva de densidade
for (var in numeric_vars) {
p <- ggplot(data, aes_string(x = var)) +
geom_histogram(aes(y = ..density..), binwidth = 30, fill = "skyblue", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1) +  # Adiciona a curva de densidade
theme_minimal() +
labs(title = paste("Distribuição de", var, "na tabela", table_name),
x = var, y = "Densidade") +
theme(plot.title = element_text(hjust = 0.5))
print(p)
}
}
create_plots(InteliStatus, "InteliStatus")
create_plots(InteliStatus, "InteliStatus")
create_plots(InteliVeiculo, "InteliVeiculo")
create_plots(InteliResultados, "InteliResultados")
create_plots(InteliFalhas, "InteliFalhas")
create_plots(InteliFalhas, "InteliFalhas")
library(tidyverse)
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(reshape2)
library(vcd)
Inteli5Merges <- read_csv("../5-ids.csv")
Inteli5Merges <- read_csv("../5-ids.csv", quote = ';')
Inteli5Merges <- read.csv2("../5-ids", stringsAsFactors = FALSE)
InteliStatus <- read_csv("../InteliStatus.csv")
InteliVeiculo <- read_csv("../InteliVeiculo.csv")
InteliResultados <- read_csv("../InteliResultados.csv")
InteliFalhas <- read_csv("../InteliFalhas.csv")
Inteli5Merges <- read.csv2("../5-ids", stringsAsFactors = FALSE)
InteliStatus <- read_csv("../InteliStatus.csv")
InteliVeiculo <- read_csv("../InteliVeiculo.csv")
InteliResultados <- read_csv("../InteliResultados.csv")
InteliFalhas <- read_csv("../InteliFalhas.csv")
Inteli5Merges <- read.csv2("../5-ids.csv", stringsAsFactors = FALSE)
head(InteliStatus)
head(InteliVeiculo)
head(InteliResultados)
head(InteliFalhas)
head(Inteli5Merges)
library(tidyverse)
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(reshape2)
library(vcd)
InteliStatus <- InteliStatus %>%
mutate(
ID = as.factor(ID),
STATUS = as.factor(STATUS),
STATUS_DATA = as.POSIXct(STATUS_DATA, format="%Y-%m-%d-%H.%M.%S", tz="UTC")
)
InteliVeiculo <- InteliVeiculo %>%
mutate(
ID = as.factor(ID),
MODELL = as.factor(MODELL),
FARBAU = as.factor(FARBAU),
FARBIN = as.factor(FARBIN),
ZIEL_LAND = as.factor(ZIEL_LAND),
PR = as.character(PR)
)
InteliResultados <- InteliResultados %>%
mutate(
ID = as.factor(ID),
RESULT_ID = as.factor(RESULT_ID),
RESULT_DESCRIPTION = as.character(RESULT_DESCRIPTION),
CAPTURE_TIME = as.POSIXct(CAPTURE_TIME, format="%Y-%m-%d-%H.%M.%S", tz="UTC"),
STATUS = as.factor(STATUS)
)
InteliFalhas <- InteliFalhas %>%
mutate(
ID = as.factor(ID),
`DATA DETECCAO` = as.POSIXct(`DATA DETECCAO`, format="%Y-%m-%d-%H.%M.%S", tz="UTC"),
PONTO=as.factor(PONTO),
LOC_ID=as.factor(LOC_ID),
LOC=as.factor(LOC),
POS_ID=as.factor(POS_ID),
POS=as.factor(POS),
TYPE_ID=as.factor(TYPE_ID),
TYPE_TEXT=as.factor(TYPE_TEXT),
VIEW_ID=as.factor(VIEW_ID),
COLUNA=as.factor(COLUNA),
LINHA=as.factor(LINHA)
)
Inteli5Merges <- Inteli5Merges %>%
mutate(
ID = as.factor((ID)),
INTELI_STATUS_STATUS = as.factor(INTELI_STATUS_STATUS),
INTELI_STATUS_STATUS_DATA = as.POSIXct(INTELI_STATUS_STATUS_DATA, format="%Y-%m-%d-%H.%M.%S", tz="UTC"),
INTELI_VEICULO_MODELL = as.factor(INTELI_VEICULO_MODELL),
INTELI_VEICULO_FARBAU = as.factor(INTELI_VEICULO_FARBAU),
INTELI_VEICULO_FARBIN = as.factor(INTELI_VEICULO_FARBIN),
INTELI_VEICULO_ZIEL_LAND = as.factor(INTELI_VEICULO_ZIEL_LAND),
INTELI_VEICULO_PR = as.character(INTELI_VEICULO_PR),
INTELI_RESULTADOS_RESULT_ID = as.factor(INTELI_RESULTADOS_RESULT_ID),
INTELI_RESULTADOS_RESULT_DESCRIPTION = as.character(INTELI_RESULTADOS_RESULT_DESCRIPTION),
INTELI_RESULTADOS_CAPTURE_TIME = as.POSIXct(INTELI_RESULTADOS_CAPTURE_TIME, format="%Y-%m-%d-%H.%M.%S", tz="UTC"),
INTELI_RESULTADOS_STATUS = as.factor(INTELI_RESULTADOS_STATUS),
INTELI_FALHAS_PONTO=as.factor(INTELI_FALHAS_PONTO),
INTELI_FALHAS_LOC_ID=as.factor(INTELI_FALHAS_LOC_ID),
INTELI_FALHAS_LOC=as.factor(INTELI_FALHAS_LOC),
INTELI_FALHAS_POS=as.factor(INTELI_FALHAS_POS),
INTELI_FALHAS_TYPE_ID=as.factor(INTELI_FALHAS_TYPE_ID),
INTELI_FALHAS_TYPE_TEXT=as.factor(INTELI_FALHAS_TYPE_TEXT),
INTELI_FALHAS_VIEW_ID=as.factor(INTELI_FALHAS_VIEW_ID),
INTELI_FALHAS_COLUNA=as.factor(INTELI_FALHAS_COLUNA),
INTELI_FALHAS_LINHA=as.factor(INTELI_FALHAS_LINHA)
)
cat("\n\n\n===== Inteli Status =====\n\n\n")
summary(InteliStatus)
cat("\n\n\n===== Inteli Veiculo =====\n\n\n")
summary(InteliVeiculo)
cat("\n\n\n===== Inteli Resultados =====\n\n\n")
summary(InteliResultados)
cat("\n\n\n===== Inteli Falhas =====\n\n\n")
summary(InteliFalhas)
cat("\n\n\n===== Inteli 5 Merges =====\n\n\n")
summary(Inteli5Merges)
create_categorical_correlation_plot(Inteli5Merges, "Inteli5Merges")
library(tidyverse)
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(reshape2)
library(vcd)
InteliStatus <- read_csv("../InteliStatus.csv")
InteliVeiculo <- read_csv("../InteliVeiculo.csv")
InteliResultados <- read_csv("../InteliResultados.csv")
InteliFalhas <- read_csv("../InteliFalhas.csv")
Inteli5Merges <- read.csv2("../5-ids.csv", stringsAsFactors = FALSE)
head(InteliStatus)
head(InteliVeiculo)
head(InteliResultados)
head(InteliFalhas)
head(Inteli5Merges)
str(InteliStatus)
str(InteliVeiculo)
str(InteliResultados)
str(InteliFalhas)
str(Inteli5Merges)
cat("\n\n\n===== Inteli Status =====\n\n\n")
summary(InteliStatus)
cat("\n\n\n===== Inteli Veiculo =====\n\n\n")
summary(InteliVeiculo)
cat("\n\n\n===== Inteli Resultados =====\n\n\n")
summary(InteliResultados)
cat("\n\n\n===== Inteli Falhas =====\n\n\n")
summary(InteliFalhas)
cat("\n\n\n===== Inteli 5 Merges =====\n\n\n")
summary(Inteli5Merges)
InteliStatus <- InteliStatus %>%
mutate(
ID = as.factor(ID),
STATUS = as.factor(STATUS),
STATUS_DATA = as.POSIXct(STATUS_DATA, format="%Y-%m-%d-%H.%M.%S", tz="UTC")
)
InteliVeiculo <- InteliVeiculo %>%
mutate(
ID = as.factor(ID),
MODELL = as.factor(MODELL),
FARBAU = as.factor(FARBAU),
FARBIN = as.factor(FARBIN),
ZIEL_LAND = as.factor(ZIEL_LAND),
PR = as.character(PR)
)
InteliResultados <- InteliResultados %>%
mutate(
ID = as.factor(ID),
RESULT_ID = as.factor(RESULT_ID),
RESULT_DESCRIPTION = as.character(RESULT_DESCRIPTION),
CAPTURE_TIME = as.POSIXct(CAPTURE_TIME, format="%Y-%m-%d-%H.%M.%S", tz="UTC"),
STATUS = as.factor(STATUS)
)
InteliFalhas <- InteliFalhas %>%
mutate(
ID = as.factor(ID),
`DATA DETECCAO` = as.POSIXct(`DATA DETECCAO`, format="%Y-%m-%d-%H.%M.%S", tz="UTC"),
PONTO=as.factor(PONTO),
LOC_ID=as.factor(LOC_ID),
LOC=as.factor(LOC),
POS_ID=as.factor(POS_ID),
POS=as.factor(POS),
TYPE_ID=as.factor(TYPE_ID),
TYPE_TEXT=as.factor(TYPE_TEXT),
VIEW_ID=as.factor(VIEW_ID),
COLUNA=as.factor(COLUNA),
LINHA=as.factor(LINHA)
)
Inteli5Merges <- Inteli5Merges %>%
mutate(
ID = as.factor((ID)),
INTELI_STATUS_STATUS = as.factor(INTELI_STATUS_STATUS),
INTELI_STATUS_STATUS_DATA = as.POSIXct(INTELI_STATUS_STATUS_DATA, format="%Y-%m-%d-%H.%M.%S", tz="UTC"),
INTELI_VEICULO_MODELL = as.factor(INTELI_VEICULO_MODELL),
INTELI_VEICULO_FARBAU = as.factor(INTELI_VEICULO_FARBAU),
INTELI_VEICULO_FARBIN = as.factor(INTELI_VEICULO_FARBIN),
INTELI_VEICULO_ZIEL_LAND = as.factor(INTELI_VEICULO_ZIEL_LAND),
INTELI_VEICULO_PR = as.character(INTELI_VEICULO_PR),
INTELI_RESULTADOS_RESULT_ID = as.factor(INTELI_RESULTADOS_RESULT_ID),
INTELI_RESULTADOS_RESULT_DESCRIPTION = as.character(INTELI_RESULTADOS_RESULT_DESCRIPTION),
INTELI_RESULTADOS_CAPTURE_TIME = as.POSIXct(INTELI_RESULTADOS_CAPTURE_TIME, format="%Y-%m-%d-%H.%M.%S", tz="UTC"),
INTELI_RESULTADOS_STATUS = as.factor(INTELI_RESULTADOS_STATUS),
INTELI_FALHAS_PONTO=as.factor(INTELI_FALHAS_PONTO),
INTELI_FALHAS_LOC_ID=as.factor(INTELI_FALHAS_LOC_ID),
INTELI_FALHAS_LOC=as.factor(INTELI_FALHAS_LOC),
INTELI_FALHAS_POS=as.factor(INTELI_FALHAS_POS),
INTELI_FALHAS_TYPE_ID=as.factor(INTELI_FALHAS_TYPE_ID),
INTELI_FALHAS_TYPE_TEXT=as.factor(INTELI_FALHAS_TYPE_TEXT),
INTELI_FALHAS_VIEW_ID=as.factor(INTELI_FALHAS_VIEW_ID),
INTELI_FALHAS_COLUNA=as.factor(INTELI_FALHAS_COLUNA),
INTELI_FALHAS_LINHA=as.factor(INTELI_FALHAS_LINHA)
)
cat("\n\n\n===== Inteli Status =====\n\n\n")
summary(InteliStatus)
cat("\n\n\n===== Inteli Veiculo =====\n\n\n")
summary(InteliVeiculo)
cat("\n\n\n===== Inteli Resultados =====\n\n\n")
summary(InteliResultados)
cat("\n\n\n===== Inteli Falhas =====\n\n\n")
summary(InteliFalhas)
cat("\n\n\n===== Inteli 5 Merges =====\n\n\n")
summary(Inteli5Merges)
create_plots <- function(data, table_name) {
categorical_vars <- data %>%
select(where(is.factor)) %>%
colnames()
for (var in categorical_vars) {
p <- ggplot(data, aes_string(x = var)) +
geom_bar() +
theme_minimal() +
labs(title = paste("Distribuição de", var, "na tabela", table_name),
x = var, y = "Contagem")
print(p)
}
}
create_plots(InteliStatus, "InteliStatus")
create_plots(InteliVeiculo, "InteliVeiculo")
create_plots(InteliResultados, "InteliResultados")
create_plots(InteliFalhas, "InteliFalhas")
create_barplot <- function(data, table_name) {
categorical_vars <- data %>%
select(where(is.factor)) %>%
colnames()
for (var in categorical_vars) {
# Contar a frequência de cada categoria
counts <- data %>%
count(.data[[var]], name = "frequency")
p <- ggplot(counts, aes(x = reorder(.data[[var]], -frequency), y = frequency)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = frequency), size = 3, angle = 90) +
labs(
title = paste("Distribuição de", var, "na tabela", table_name),
x = var,
y = "Frequência"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotaciona labels se houver muitas categorias
print(p)
}
}
create_barplot(InteliStatus, 'InteliStatus')
create_barplot(InteliVeiculo, "InteliVeiculo")
create_barplot(InteliResultados, "InteliResultados")
create_barplot(InteliFalhas, "InteliFalhas")
create_barplot(InteliFalhas, "InteliFalhas")
create_barplot <- function(data, table_name) {
categorical_vars <- data %>%
select(where(is.factor)) %>%
colnames()
for (var in categorical_vars) {
# Contar a frequência de cada categoria
counts <- data %>%
count(.data[[var]], name = "frequency")
p <- ggplot(counts, aes(x = reorder(.data[[var]], -frequency), y = frequency)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = frequency), size = 3, angle = 90) +
labs(
title = paste("Distribuição de", var, "na tabela", table_name),
x = var,
y = "Frequência"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotaciona labels se houver muitas categorias
print(p)
}
}
create_barplot(InteliStatus, 'InteliStatus')
library(tidyverse)
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(reshape2)
library(vcd)
InteliStatus <- read_csv("../InteliStatus.csv")
InteliVeiculo <- read_csv("../InteliVeiculo.csv")
InteliResultados <- read_csv("../InteliResultados.csv")
InteliFalhas <- read_csv("../InteliFalhas.csv")
Inteli5Merges <- read.csv2("../5-ids.csv", stringsAsFactors = FALSE)
head(InteliStatus)
head(InteliVeiculo)
head(InteliResultados)
head(InteliFalhas)
head(Inteli5Merges)
str(InteliStatus)
str(InteliVeiculo)
str(InteliResultados)
str(InteliFalhas)
str(Inteli5Merges)
cat("\n\n\n===== Inteli Status =====\n\n\n")
summary(InteliStatus)
cat("\n\n\n===== Inteli Veiculo =====\n\n\n")
summary(InteliVeiculo)
cat("\n\n\n===== Inteli Resultados =====\n\n\n")
summary(InteliResultados)
cat("\n\n\n===== Inteli Falhas =====\n\n\n")
summary(InteliFalhas)
cat("\n\n\n===== Inteli 5 Merges =====\n\n\n")
summary(Inteli5Merges)
InteliStatus <- InteliStatus %>%
mutate(
ID = as.factor(ID),
STATUS = as.factor(STATUS),
STATUS_DATA = as.POSIXct(STATUS_DATA, format="%Y-%m-%d-%H.%M.%S", tz="UTC")
)
InteliVeiculo <- InteliVeiculo %>%
mutate(
ID = as.factor(ID),
MODELL = as.factor(MODELL),
FARBAU = as.factor(FARBAU),
FARBIN = as.factor(FARBIN),
ZIEL_LAND = as.factor(ZIEL_LAND),
PR = as.character(PR)
)
InteliResultados <- InteliResultados %>%
mutate(
ID = as.factor(ID),
RESULT_ID = as.factor(RESULT_ID),
RESULT_DESCRIPTION = as.character(RESULT_DESCRIPTION),
CAPTURE_TIME = as.POSIXct(CAPTURE_TIME, format="%Y-%m-%d-%H.%M.%S", tz="UTC"),
STATUS = as.factor(STATUS)
)
InteliFalhas <- InteliFalhas %>%
mutate(
ID = as.factor(ID),
`DATA DETECCAO` = as.POSIXct(`DATA DETECCAO`, format="%Y-%m-%d-%H.%M.%S", tz="UTC"),
PONTO=as.factor(PONTO),
LOC_ID=as.factor(LOC_ID),
LOC=as.factor(LOC),
POS_ID=as.factor(POS_ID),
POS=as.factor(POS),
TYPE_ID=as.factor(TYPE_ID),
TYPE_TEXT=as.factor(TYPE_TEXT),
VIEW_ID=as.factor(VIEW_ID),
COLUNA=as.factor(COLUNA),
LINHA=as.factor(LINHA)
)
Inteli5Merges <- Inteli5Merges %>%
mutate(
ID = as.factor((ID)),
INTELI_STATUS_STATUS = as.factor(INTELI_STATUS_STATUS),
INTELI_STATUS_STATUS_DATA = as.POSIXct(INTELI_STATUS_STATUS_DATA, format="%Y-%m-%d-%H.%M.%S", tz="UTC"),
INTELI_VEICULO_MODELL = as.factor(INTELI_VEICULO_MODELL),
INTELI_VEICULO_FARBAU = as.factor(INTELI_VEICULO_FARBAU),
INTELI_VEICULO_FARBIN = as.factor(INTELI_VEICULO_FARBIN),
INTELI_VEICULO_ZIEL_LAND = as.factor(INTELI_VEICULO_ZIEL_LAND),
INTELI_VEICULO_PR = as.character(INTELI_VEICULO_PR),
INTELI_RESULTADOS_RESULT_ID = as.factor(INTELI_RESULTADOS_RESULT_ID),
INTELI_RESULTADOS_RESULT_DESCRIPTION = as.character(INTELI_RESULTADOS_RESULT_DESCRIPTION),
INTELI_RESULTADOS_CAPTURE_TIME = as.POSIXct(INTELI_RESULTADOS_CAPTURE_TIME, format="%Y-%m-%d-%H.%M.%S", tz="UTC"),
INTELI_RESULTADOS_STATUS = as.factor(INTELI_RESULTADOS_STATUS),
INTELI_FALHAS_PONTO=as.factor(INTELI_FALHAS_PONTO),
INTELI_FALHAS_LOC_ID=as.factor(INTELI_FALHAS_LOC_ID),
INTELI_FALHAS_LOC=as.factor(INTELI_FALHAS_LOC),
INTELI_FALHAS_POS=as.factor(INTELI_FALHAS_POS),
INTELI_FALHAS_TYPE_ID=as.factor(INTELI_FALHAS_TYPE_ID),
INTELI_FALHAS_TYPE_TEXT=as.factor(INTELI_FALHAS_TYPE_TEXT),
INTELI_FALHAS_VIEW_ID=as.factor(INTELI_FALHAS_VIEW_ID),
INTELI_FALHAS_COLUNA=as.factor(INTELI_FALHAS_COLUNA),
INTELI_FALHAS_LINHA=as.factor(INTELI_FALHAS_LINHA)
)
cat("\n\n\n===== Inteli Status =====\n\n\n")
summary(InteliStatus)
cat("\n\n\n===== Inteli Veiculo =====\n\n\n")
summary(InteliVeiculo)
cat("\n\n\n===== Inteli Resultados =====\n\n\n")
summary(InteliResultados)
cat("\n\n\n===== Inteli Falhas =====\n\n\n")
summary(InteliFalhas)
cat("\n\n\n===== Inteli 5 Merges =====\n\n\n")
summary(Inteli5Merges)
create_plots <- function(data, table_name) {
categorical_vars <- data %>%
select(where(is.factor)) %>%
colnames()
for (var in categorical_vars) {
p <- ggplot(data, aes_string(x = var)) +
geom_bar() +
theme_minimal() +
labs(title = paste("Distribuição de", var, "na tabela", table_name),
x = var, y = "Contagem")
print(p)
}
}
create_plots <- function(data, table_name) {
categorical_vars <- data %>%
select(where(is.factor)) %>%
colnames()
for (var in categorical_vars) {
p <- ggplot(data, aes_string(x = var)) +
geom_bar() +
theme_minimal() +
labs(title = paste("Distribuição de", var, "na tabela", table_name),
x = var, y = "Contagem")
print(p)
}
}
create_plots(InteliStatus, "InteliStatus")
create_plots(InteliVeiculo, "InteliVeiculo")
